$date
	Fri Jun  6 02:53:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module comparator_tb $end
$var wire 1 ! tb_less $end
$var wire 1 " tb_greater $end
$var wire 1 # tb_equal $end
$var parameter 32 $ NUM_TESTS $end
$var reg 8 % ref_a [7:0] $end
$var reg 8 & ref_b [7:0] $end
$var reg 3 ' ref_result [2:0] $end
$var reg 8 ( tb_a [7:0] $end
$var reg 8 ) tb_b [7:0] $end
$var reg 1 * done_flag $end
$var reg 1 + fatal_on_error $end
$var integer 32 , rand_val [31:0] $end
$scope module dut $end
$var wire 8 - a [7:0] $end
$var wire 8 . b [7:0] $end
$var wire 1 ! less $end
$var wire 1 " greater $end
$var wire 1 # equal $end
$var reg 3 / cmp_result [2:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 0 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10100 $
$end
#0
$dumpvars
b0 0
b1 /
b1000000 .
b10010010 -
b1000000 ,
0+
0*
b1000000 )
b10010010 (
bx '
b1000000 &
b10010010 %
0#
1"
0!
$end
#1000
1!
0"
b10 /
b110001 )
b110001 .
b100 (
b100 -
b110001 &
b100 %
b110001 ,
b1 0
b1 '
#2000
b11000110 )
b11000110 .
b10000110 (
b10000110 -
b11000110 &
b10000110 %
b11000110 ,
b10 0
b10 '
#3000
0!
1"
b1 /
b1001 )
b1001 .
b110010 (
b110010 -
b1001 &
b110010 %
b1001 ,
b11 0
#4000
1!
0"
b10 /
b10000110 )
b10000110 .
b10000000 (
b10000000 -
b10000110 &
b10000000 %
b10000110 ,
b100 0
b1 '
#5000
0!
1"
b1 /
b10011110 )
b10011110 .
b10111011 (
b10111011 -
b10011110 &
b10111011 %
b10011110 ,
b101 0
b10 '
#6000
b11000110 )
b11000110 .
b11110110 (
b11110110 -
b11000110 &
b11110110 %
b11000110 ,
b110 0
b1 '
#7000
b1100011 )
b1100011 .
b11111100 (
b11111100 -
b1100011 &
b11111100 %
b1100011 ,
b111 0
#8000
b1010101 )
b1010101 .
b1100010 (
b1100010 -
b1010101 &
b1100010 %
b1010101 ,
b1000 0
#9000
b111011 )
b111011 .
b11110010 (
b11110010 -
b111011 &
b11110010 %
b111011 ,
b1001 0
#10000
1!
0"
b10 /
b11000111 )
b11000111 .
b1001 (
b1001 -
b11000111 &
b1001 %
b11000111 ,
b1010 0
#11000
0!
1"
b1 /
b1100111 )
b1100111 .
b11111001 (
b11111001 -
b1100111 &
b11111001 %
b1100111 ,
b1011 0
b10 '
#12000
b1100010 )
b1100010 .
b1110100 (
b1110100 -
b1100010 &
b1110100 %
b1100010 ,
b1100 0
b1 '
#13000
b1011110 )
b1011110 .
b10101110 (
b10101110 -
b1011110 &
b10101110 %
b1011110 ,
b1101 0
#14000
1!
0"
b10 /
b110010 )
b110010 .
b10110 (
b10110 -
b110010 &
b10110 %
b110010 ,
b1110 0
#15000
b10000101 )
b10000101 .
b110001 (
b110001 -
b10000101 &
b110001 %
b10000101 ,
b1111 0
b10 '
#16000
b10010000 )
b10010000 .
b1000000 (
b1000000 -
b10010000 &
b1000000 %
b10010000 ,
b10000 0
#17000
0!
1"
b1 /
b1001110 )
b1001110 .
b11010101 (
b11010101 -
b1001110 &
b11010101 %
b1001110 ,
b10001 0
#18000
b1001 )
b1001 .
b1001011 (
b1001011 -
b1001 &
b1001011 %
b1001 ,
b10010 0
b1 '
#19000
1!
0"
b10 /
b101001 )
b101001 .
b110 (
b110 -
b101001 &
b110 %
b101001 ,
b10011 0
#20000
1*
b10100 0
b10 '
